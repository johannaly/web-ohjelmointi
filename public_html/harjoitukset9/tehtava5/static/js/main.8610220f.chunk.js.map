{"version":3,"sources":["logo.svg","Nelilaskin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nelilaskin","props","handleClick","bind","index","myElements","document","querySelectorAll","i","length","style","backgroundColor","n1","parseInt","this","refs","value","n2","n3","type","ref","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,mKC6D1BC,G,wDAxDhB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFJ,E,wDAKJC,GAKd,IAHA,IAAIC,EAAaC,SAASC,iBAAiB,UAGlCC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IACnCH,EAAWG,GAAGE,MAAMC,gBAAkB,OAGpC,IAAMC,EAAKC,SAASC,KAAKC,KAAKH,GAAGI,OAC3BC,EAAKJ,SAASC,KAAKC,KAAKE,GAAGD,OACpB,KAATZ,IACAU,KAAKC,KAAKG,GAAGF,MAAQJ,EAAKK,EAC1BZ,EAAW,GAAGK,MAAMC,gBAAkB,WAE7B,KAATP,IACAU,KAAKC,KAAKG,GAAGF,MAAQJ,EAAIK,EACzBZ,EAAW,GAAGK,MAAMC,gBAAkB,WAG7B,KAATP,IACAU,KAAKC,KAAKG,GAAGF,MAAQJ,EAAKK,EAC1BZ,EAAW,GAAGK,MAAMC,gBAAkB,WAE7B,KAATP,IACAU,KAAKC,KAAKG,GAAGF,MAAQJ,EAAKK,EAC1BZ,EAAW,GAAGK,MAAMC,gBAAkB,a,+BAK7C,OACE,6BACL,+BACA,+BACA,4BAAI,sCAAe,4BAAI,2BAAOQ,KAAK,OAAOC,IAAI,SAC9C,4BAAI,sCAAe,4BAAI,2BAAOD,KAAK,OAAOC,IAAI,SAC9C,4BAAI,sCAAe,4BAAI,2BAAOD,KAAK,OAAOC,IAAI,SAC9C,4BAAI,qCAAc,4BACR,4BAAQC,QAAWP,KAAKZ,YAAYC,KAAKW,KAAM,MAA/C,KACA,4BAAQO,QAAWP,KAAKZ,YAAYC,KAAKW,KAAM,MAA/C,KACA,4BAAQO,QAAWP,KAAKZ,YAAYC,KAAKW,KAAM,MAA/C,KACA,4BAAQO,QAAWP,KAAKZ,YAAYC,KAAKW,KAAM,MAA/C,c,GAjDaQ,IAAMC,YCehBC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,0CACA,yBAAKA,UAAW,OACd,kBAAC,EAAD,UCCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8610220f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Nelilaskin.css';\r\n\r\nclass Nelilaskin extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.handleClick = this.handleClick.bind(this);\r\n\t  }\r\n\r\n\t  handleClick (index) {\r\n\t\t// Haetaan kaikki button-elementit\r\n\t\tvar myElements = document.querySelectorAll(\"button\");\r\n\t \r\n\t\t// Asetetaan kaikille buttoneille alkuperÃ¤inen vÃ¤ri:\r\n\t\tfor (var i = 0; i < myElements.length; i++) {\r\n\t\t    myElements[i].style.backgroundColor = \"#069\";\r\n            }  \r\n\r\n        const n1 = parseInt(this.refs.n1.value);\r\n        const n2 = parseInt(this.refs.n2.value);\r\n        if (index == \"+\") {\r\n            this.refs.n3.value = n1 + n2;\r\n            myElements[0].style.backgroundColor = \"#008000\";\r\n        }\r\n        if (index == \"-\") {\r\n            this.refs.n3.value = n1 -n2;\r\n            myElements[1].style.backgroundColor = \"#008000\";\r\n\r\n        }\r\n        if (index == \"*\") {\r\n            this.refs.n3.value = n1 * n2;\r\n            myElements[2].style.backgroundColor = \"#008000\";\r\n        }\r\n        if (index == \"/\") {\r\n            this.refs.n3.value = n1 / n2;\r\n            myElements[3].style.backgroundColor = \"#008000\";\r\n        }    \r\n\t}\r\n\r\n\trender() {\r\n\t    return (\r\n\t      <div>\r\n\t\t<table>\r\n\t\t<tbody>\r\n\t\t<tr><td>Luku1:</td><td><input type=\"text\" ref=\"n1\" /></td></tr>\r\n\t\t<tr><td>Luku2:</td><td><input type=\"text\" ref=\"n2\" /></td></tr>\r\n\t\t<tr><td>Tulos:</td><td><input type=\"text\" ref=\"n3\" /></td></tr>\r\n\t\t<tr><td>Laske</td><td>\r\n            <button onClick = {this.handleClick.bind(this, \"+\")}>+</button>\r\n            <button onClick = {this.handleClick.bind(this, \"-\")}>-</button>\r\n            <button onClick = {this.handleClick.bind(this, \"*\")}>*</button>\r\n            <button onClick = {this.handleClick.bind(this, \"/\")}>/</button>\r\n        </td></tr>\r\n\t\t</tbody>\r\n\t\t</table>\r\n\t      </div>\r\n\t    );\r\n\t  }\r\n  }\r\n  \r\n  export default Nelilaskin;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Nelilaskin from './Nelilaskin';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Nelilaskin</h3>\n        <div className= \"box\">\n          <Nelilaskin />\n        </div>  \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}